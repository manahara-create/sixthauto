// src/services/reportService.js
import { supabase } from './supabase';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import DatabaseService from './databaseService';
import dayjs from 'dayjs';

export class ReportService {
  static async generatePDFReport(reportData, options = {}) {
    const doc = new jsPDF();
    const {
      title = 'Report',
      subtitle = '',
      headers = [],
      data = [],
      summary = null,
      orientation = 'portrait'
    } = options;

    // Set document properties
    doc.setProperties({
      title: title,
      subject: subtitle,
      author: 'HR System',
      creator: 'HR System'
    });

    // Title
    doc.setFontSize(20);
    doc.text(title, 105, 15, { align: 'center' });
    
    if (subtitle) {
      doc.setFontSize(12);
      doc.text(subtitle, 105, 25, { align: 'center' });
    }

    // Generated info
    doc.setFontSize(10);
    doc.text(`Generated on: ${dayjs().format('MMMM D, YYYY HH:mm')}`, 14, 35);
    
    if (reportData.generatedBy) {
      doc.text(`Generated by: ${reportData.generatedBy}`, 14, 42);
    }

    // Summary section
    let startY = 50;
    if (summary) {
      doc.setFontSize(12);
      doc.text('Summary:', 14, startY);
      startY += 8;
      
      Object.entries(summary).forEach(([key, value], index) => {
        doc.text(`${key}: ${value}`, 20, startY + (index * 6));
      });
      startY += Object.keys(summary).length * 6 + 10;
    }

    // Table
    if (headers.length > 0 && data.length > 0) {
      doc.autoTable({
        startY: startY,
        head: [headers],
        body: data,
        theme: 'grid',
        styles: { fontSize: 8 },
        headStyles: { fillColor: [41, 128, 185] }
      });
    }

    // Add page numbers
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(
        `Page ${i} of ${pageCount}`,
        doc.internal.pageSize.width / 2,
        doc.internal.pageSize.height - 10,
        { align: 'center' }
      );
    }

    return doc;
  }

  static async generateSalaryReport(filters = {}) {
    const salaries = await DatabaseService.getSalaries(filters);
    
    const headers = ['Employee', 'Department', 'Basic Salary', 'OT Pay', 'Bonus', 'Total Salary', 'Date'];
    const data = salaries.map(salary => [
      `${salary.employee?.first_name} ${salary.employee?.last_name}`,
      salary.employee?.department || 'N/A',
      `$${salary.basicsalary?.toLocaleString()}`,
      `$${salary.otpay?.toLocaleString()}`,
      `$${salary.bonuspay?.toLocaleString()}`,
      `$${salary.totalsalary?.toLocaleString()}`,
      dayjs(salary.salarydate).format('MMM D, YYYY')
    ]);

    const totalSalary = salaries.reduce((sum, s) => sum + (s.totalsalary || 0), 0);

    const doc = this.generatePDFReport({}, {
      title: 'Salary Report',
      subtitle: `Period: ${filters.month || 'All Time'}`,
      headers,
      data,
      summary: {
        'Total Employees': salaries.length,
        'Total Salary Paid': `$${totalSalary.toLocaleString()}`,
        'Average Salary': `$${Math.round(totalSalary / (salaries.length || 1)).toLocaleString()}`
      }
    });

    return doc;
  }

  static async generateAttendanceReport(filters = {}) {
    const attendance = await DatabaseService.getAttendance(filters);
    
    const headers = ['Employee', 'Date', 'Punch In', 'Punch Out', 'Status', 'Working Hours'];
    const data = attendance.map(record => {
      let workingHours = 'N/A';
      if (record.intime && record.outtime) {
        const inTime = dayjs(record.intime, 'HH:mm:ss');
        const outTime = dayjs(record.outtime, 'HH:mm:ss');
        const hours = outTime.diff(inTime, 'hour', true);
        workingHours = `${hours.toFixed(2)}h`;
      }

      return [
        `${record.employee?.first_name} ${record.employee?.last_name}`,
        dayjs(record.date).format('MMM D, YYYY'),
        record.intime || 'N/A',
        record.outtime || 'N/A',
        record.status,
        workingHours
      ];
    });

    const presentCount = attendance.filter(a => a.status === 'Present').length;
    const absentCount = attendance.filter(a => a.status === 'Absent').length;

    const doc = this.generatePDFReport({}, {
      title: 'Attendance Report',
      headers,
      data,
      summary: {
        'Total Records': attendance.length,
        'Present Days': presentCount,
        'Absent Days': absentCount,
        'Attendance Rate': `${((presentCount / (attendance.length || 1)) * 100).toFixed(1)}%`
      }
    });

    return doc;
  }

  static async generateLeaveReport(filters = {}) {
    const leaves = await DatabaseService.getLeaves(filters);
    
    const headers = ['Employee', 'Leave Type', 'From Date', 'To Date', 'Duration', 'Reason', 'Status'];
    const data = leaves.map(leave => [
      `${leave.employee?.first_name} ${leave.employee?.last_name}`,
      leave.leavetype?.leavetype || 'N/A',
      dayjs(leave.leavefromdate).format('MMM D, YYYY'),
      dayjs(leave.leavetodate).format('MMM D, YYYY'),
      `${leave.duration} days`,
      leave.leavereason?.substring(0, 30) + (leave.leavereason?.length > 30 ? '...' : ''),
      leave.leavestatus
    ]);

    const statusCount = leaves.reduce((acc, leave) => {
      acc[leave.leavestatus] = (acc[leave.leavestatus] || 0) + 1;
      return acc;
    }, {});

    const doc = this.generatePDFReport({}, {
      title: 'Leave Report',
      headers,
      data,
      summary: {
        'Total Leaves': leaves.length,
        'Pending': statusCount.pending || 0,
        'Approved': statusCount.approved || 0,
        'Rejected': statusCount.rejected || 0
      }
    });

    return doc;
  }

  static async generateEmployeeReport(filters = {}) {
    const employees = await DatabaseService.getEmployees(filters);
    
    const headers = ['Employee ID', 'Name', 'Email', 'Department', 'Role', 'Status', 'Join Date'];
    const data = employees.map(emp => [
      emp.empid,
      `${emp.first_name} ${emp.last_name}`,
      emp.email,
      emp.department,
      emp.role,
      emp.status,
      dayjs(emp.created_at).format('MMM D, YYYY')
    ]);

    const deptCount = employees.reduce((acc, emp) => {
      acc[emp.department] = (acc[emp.department] || 0) + 1;
      return acc;
    }, {});

    const doc = this.generatePDFReport({}, {
      title: 'Employee Report',
      headers,
      data,
      summary: {
        'Total Employees': employees.length,
        'Active Employees': employees.filter(e => e.is_active).length,
        'Departments': Object.keys(deptCount).length,
        ...deptCount
      }
    });

    return doc;
  }

  static downloadPDF(doc, filename) {
    doc.save(`${filename}_${dayjs().format('YYYYMMDD_HHmmss')}.pdf`);
  }
}

export default ReportService;